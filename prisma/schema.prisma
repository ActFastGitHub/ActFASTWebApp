generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  provider       String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  Profile  Profile?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Profile Details
  lastName    String?
  firstName   String?
  nickname    String? @unique
  birthday    String?
  phonenumber String?
  image       String?

  // Hidden Details
  employeeID     String?
  role           String?
  driversLicense String?
  active         Boolean?

  // Define the 1-to-1 relationship with User using email as the reference
  userEmail String @unique @map("userEmail")
  user      User   @relation(fields: [userEmail], references: [email])

  // 1-to-1 relationship - This is the relationship to Address
  location Location?

  // 1-to-many relationship with Boxes last modified by this profile
  boxesModified Box[] @relation("LastModifiedProfile")

  // 1-to-many relationship with Items added by this profile
  itemsAdded Item[] @relation("AddedByProfile")

  // 1-to-many relationship with Items last modified by this profile
  itemsModified Item[] @relation("ModifiedByProfile")
}

model Location {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  lng       Float
  lat       Float
  address   Address?
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String   @unique @db.ObjectId
}

model Address {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  fullAddress     String
  pointOfInterest String
  city            String
  country         String
  location        Location @relation(fields: [locationId], references: [id])
  locationId      String   @unique @db.ObjectId
}

model Box {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  boxNumber        String   @unique
  name             String
  color            String
  level            Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  lastModifiedById String?

  lastModifiedBy Profile? @relation("LastModifiedProfile", fields: [lastModifiedById], references: [nickname])

  items Item[] @relation("BoxItems")
}

model Item {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  addedAt          DateTime @default(now())
  lastModifiedAt   DateTime @updatedAt
  addedById        String?
  lastModifiedById String?
  boxId            String
  projectCode      String?

  addedBy        Profile? @relation("AddedByProfile", fields: [addedById], references: [nickname])
  lastModifiedBy Profile? @relation("ModifiedByProfile", fields: [lastModifiedById], references: [nickname])
  box            Box      @relation("BoxItems", fields: [boxId], references: [boxNumber])
}

model Project {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  code         String  @unique
  insured      String?
  address      String?
  claimNo      String?
  adjuster     String?
  typeOfDamage String?
  category     String?
  dateOfLoss   String?
  dateAttended String?
  lockBoxCode  String?
  notes        String?
}
